 "use strict"
/*
// H√§mtar elementen
let openButton = document.getElementById("open-menu");
let closeButton = document.getElementById("close-menu");

//L√§gger till eventlyssnare
openButton.addEventListener('click', toggleMenu);
closeButton.addEventListener('click', toggleMenu);

// Skapar funktionen som fungerar p√• b√•da knapparna
function toggleMenu() {
    let navMenuEl = document.getElementById("nav-menu");
    navMenuEl.classList.toggle("open")

    let style = window.getComputedStyle(navMenuEl);
    if (style.display === "none") {
        navMenuEl.style.display = "block";
    } else {
        navMenuEl.style.display = "none";
    }
} */

// Knapp f√∂r ljust och m√∂rkt tema

// V√§nta p√• att hela dokumentet har laddats
document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("theme-toggle");
    const currentTheme = localStorage.getItem("theme");
  
    // Kontrollera om anv√§ndaren har ett sparat tema i localStorage
    if (currentTheme) {
      document.documentElement.setAttribute("data-theme", currentTheme);
      if (currentTheme === "dark") {
        themeToggle.checked = true; // Om m√∂rkt tema √§r valt, s√§tt p√• switchen
      }
    }
  
    // L√§gg till en eventlistener p√• toggle-knappen
    themeToggle.addEventListener("change", () => {
      let theme = document.documentElement.getAttribute("data-theme");
      
      if (theme === "dark") {
        // S√§tt tillbaka ljust tema
        document.documentElement.setAttribute("data-theme", "light");
        localStorage.setItem("theme", "light");
      } else {
        // S√§tt m√∂rkt tema
        document.documentElement.setAttribute("data-theme", "dark");
        localStorage.setItem("theme", "dark");
      }
    });
  });

  // KARTAN

// Lyssnar efter n√§r DOMen laddats klart innan funktionen k√∂rs
  document.addEventListener("DOMContentLoaded", () => {
// Samlar alla element samt API-nyckeln fr√•n OpenWeather i variabler
    const searchButton = document.getElementById("search-btn");
    const locationInput = document.getElementById("city-input");
    const mapContainer = document.getElementById("map-container");
    const weatherInfo = document.getElementById("weather-info");
    const API_KEY = "0cef79cf6ad06decc7cf8cf1842e442d";

    // Kontrollerar att elementen finns och om de inte finns s√• avbryts koden med return
    if (!searchButton || !locationInput || !mapContainer || !weatherInfo) {
        return;
    }

    // Funktionen tar in parametrarna longitud och latitud
    function updateMap(lat, lon) {
        // L√§gger kartan i en iframe med style
        mapContainer.innerHTML = ` 
            <iframe 
                width="100%" 
                height="400" 
                style="border-radius: 10px; border: none;"
                src="https://www.openstreetmap.org/export/embed.html?bbox=${lon-0.05},${lat-0.05},${lon+0.05},${lat+0.05}&layer=mapnik&marker=${lat},${lon}">
            </iframe>
        `;
        // Skapar ett litet omr√•de kring punkten med bounding box och s√§tter en mark√∂r p√• punkten
    }

    function updateWeather(lat, lon) {
        // H√§mtar v√§derdata fr√•n OpenWeather API med angivna latitud och longitud
        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&lang=sv`)
            .then(response => response.json()) // Konverterar svaret till JSON-format
            .then(weatherData => {
                // Kontrollerar om API-anropet lyckades (kod 200 betyder att data h√§mtades korrekt)
                if (weatherData.cod === 200) {
                    // Uppdaterar v√§derinformationen i HTML med data fr√•n API
                    weatherInfo.innerHTML = `
                        <div class="weather-card">
                            <h3 class="city-name">${weatherData.name}, ${weatherData.sys.country}</h3>
                            <p class="weather-description">${weatherData.weather[0].description}</p>
                            <p class="temperature">üå°Ô∏è <span>${weatherData.main.temp}¬∞C</span></p>
                            <p class="wind-speed">üí® <span>${weatherData.wind.speed} m/s</span></p>
                        </div>
                    `;
                } else {
                    // Om API-svaret inneh√•ller ett felmeddelande, visas detta ist√§llet
                    weatherInfo.textContent = "V√§derinformation kunde inte h√§mtas.";
                }
            })
            .catch(error => {
                // Om n√•got g√•r fel vid API-anropet, loggas felet i konsolen och ett felmeddelande visas
                console.error("Fel vid h√§mtning av v√§derdata:", error);
                weatherInfo.textContent = "N√•got gick fel vid h√§mtning av v√§der!";
            });
    }

    function searchLocation() {
        // H√§mtar platsen som anv√§ndaren har skrivit in i inputf√§ltet och tar bort eventuella mellanslag i b√∂rjan/slutet
        let location = locationInput.value.trim();
    
        // Kontrollerar om inputf√§ltet √§r tomt, om ja - visa en varning och avsluta funktionen
        if (!location) {
            alert("Ange en plats!"); // Meddelar anv√§ndaren att de m√•ste ange en plats
            return;
        }
    
        // Skickar en f√∂rfr√•gan till Nominatim API (OpenStreetMap) f√∂r att h√§mta latitud och longitud f√∂r platsen
        fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}`)
            .then(response => response.json()) // Konverterar svaret till JSON-format
            .then(data => {
                // Om inga resultat hittades, visa en varning och avsluta funktionen
                if (data.length === 0) {
                    alert("Platsen hittades inte!"); // Meddelar anv√§ndaren att platsen inte kunde hittas
                    return;
                }
    
                // Konverterar latitud och longitud fr√•n str√§ng till flyttal (decimaltal)
                let lat = parseFloat(data[0].lat);
                let lon = parseFloat(data[0].lon);
    
                // Uppdaterar kartan med de nya koordinaterna
                updateMap(lat, lon);
                // H√§mtar och uppdaterar v√§derinformationen f√∂r platsen
                updateWeather(lat, lon);
            })
            .catch(error => {
                // Om n√•got g√•r fel vid API-anropet, loggas felet i konsolen
                console.error("Fel vid API-anrop:", error);
            });
    }

    searchButton.addEventListener("click", searchLocation);
});